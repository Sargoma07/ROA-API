{
	"info": {
		"_postman_id": "3bf56f7b-895b-4cb4-abeb-c7b9226f7c0e",
		"name": "ROA-API Intergrations Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3953179"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "SignUp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"externalId\": \"{{externalUserId}}\",\r\n    \"provider\": \"Local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/auth/signup",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						},
						"description": "### Signup User\n\nThis endpoint allows you to create a new user account.\n\n**Request Body**\n\n- `externalId` (string): The external ID of the user.\n    \n- `provider` (string, optional): The provider of the user account.\n    \n\n**Response**\n\n**Ok**\n\n- access (string): JWT\n    \n- refresh (string): Token to refresh access token\n    \n\n``` json\n{\n    \"access\": \"string\",\n    \"refresh\": \"string\"\n}\n\n ```\n\n**Error**\n\n``` json\n{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n    \"title\": \"Bad Request\",\n    \"status\": 400,\n    \"traceId\": \"00-96c3f4e72bc05e2597f1e8e7b0c01332-d20c18aa1f6e8783-01\"\n}\n\n ```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Refresh token",
			"item": [
				{
					"name": "SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code == 200)\r",
									"{\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.environment.set(\"accessToken\", jsonData.access);\r",
									"    pm.environment.set(\"refreshToken\",jsonData.refresh);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"externalId\": \"{{externalUserId}}\",\r\n    \"provider\": \"Local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/auth/signin",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						},
						"description": "### Sign In\n\nThis endpoint is used to sign in with external authentication provider.\n\n#### Request Body\n\n- `externalId` (string, required): The external ID for authentication.\n    \n- `provider` (string, required): The authentication provider.\n    \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- `access` (string): The access token for authentication.\n    \n- `refresh` (string): The refresh token for authentication."
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - access, refresh\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('access');\r",
									"    pm.expect(responseData).to.have.property('refresh');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"access\": \"{{accessToken}}\",\r\n    \"refresh\": \"{{refreshToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/auth/refreshToken",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"auth",
								"refreshToken"
							]
						},
						"description": "### Refresh Token\n\nThis endpoint is used to refresh the access token by providing the refresh token.\n\n#### Request Body\n\n- `access` (string, required): The access token.\n    \n- `refresh` (string, required): The refresh token.\n    \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- `access` (string): The access token for authentication.\n    \n- `refresh` (string): The refresh token for authentication."
					},
					"response": []
				},
				{
					"name": "Authorized place",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/inventory/storage",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"inventory",
								"storage"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update inventory",
			"item": [
				{
					"name": "SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code == 200)\r",
									"{\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.environment.set(\"accessToken\", jsonData.access);\r",
									"    pm.environment.set(\"refreshToken\",jsonData.refresh);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"externalId\": \"{{externalUserId}}\",\r\n    \"provider\": \"Local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/auth/signin",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						},
						"description": "### Sign In\n\nThis endpoint is used to sign in with external authentication provider.\n\n#### Request Body\n\n- `externalId` (string, required): The external ID for authentication.\n    \n- `provider` (string, required): The authentication provider.\n    \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- `access` (string): The access token for authentication.\n    \n- `refresh` (string): The refresh token for authentication."
					},
					"response": []
				},
				{
					"name": "UpdateInventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has 40 slots\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.slots.length).to.equal(40);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has 1 no empty slot\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.slots[0].data.dataSpec).to.not.equal(\"None\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"slots\": [\r\n        {\r\n            \"slot\": \"0\",\r\n            \"data\": {\r\n                \"count\": 3,\r\n                \"dataSpec\": \"/Script/Engine.BlueprintGeneratedClass'/Game/Gameplay/Inventory/InventoryItemData/BP_GoldInventoryData.BP_GoldInventoryData_C'\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"1\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"2\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"3\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"4\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"5\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"6\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"7\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"8\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"9\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"10\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"11\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"12\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"13\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"14\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"15\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"16\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"17\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"18\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"19\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"20\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"21\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"22\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"23\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"24\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"25\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"26\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"27\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"28\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"29\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"30\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"31\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"32\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"33\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"34\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"35\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"36\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"37\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"38\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        },\r\n        {\r\n            \"slot\": \"39\",\r\n            \"data\": {\r\n                \"count\": 0,\r\n                \"dataSpec\": \"None\"\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/inventory",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"inventory"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Execute payment",
			"item": [
				{
					"name": "SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function parseJwt (token) {\r",
									"    return JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());\r",
									"}\r",
									"\r",
									"if(pm.response.code == 200)\r",
									"{\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.environment.set(\"accessToken\", jsonData.access);\r",
									"    pm.environment.set(\"refreshToken\",jsonData.refresh);\r",
									"\r",
									"    let tokenPayload = parseJwt(jsonData.access);\r",
									"    pm.environment.set(\"userId\",tokenPayload.sub);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"externalId\": \"{{externalUserId}}\",\r\n    \"provider\": \"Local\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/auth/signin",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						},
						"description": "### Sign In\n\nThis endpoint is used to sign in with external authentication provider.\n\n#### Request Body\n\n- `externalId` (string, required): The external ID for authentication.\n    \n- `provider` (string, required): The authentication provider.\n    \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- `access` (string): The access token for authentication.\n    \n- `refresh` (string): The refresh token for authentication."
					},
					"response": []
				},
				{
					"name": "GetAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let amount;\r",
									"if(pm.response.code == 200)\r",
									"{\r",
									"    const responseData = pm.response.json();\r",
									"    amount = responseData.balances[0].amount;\r",
									"    pm.variables.set(\"accountAmount\", amount);\r",
									"}\r",
									"\r",
									"pm.test(`Response status code is 200 - amount: ${amount}`, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/payment/account",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"payment",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreatePayment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let paymentTotal;\r",
									"if(pm.response.code == 200)\r",
									"{\r",
									"    let responseData = pm.response.json();\r",
									"    pm.variables.set(\"paymentId\", responseData.id);\r",
									"\r",
									"    paymentTotal = responseData.totalDetails.total;\r",
									"\r",
									"    pm.variables.set(\"paymentTotal\", paymentTotal);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(`Response has calculated total: ${paymentTotal}`, function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    let total = 0;\r",
									"    responseData.order.lines.forEach(function(item) {\r",
									"        total +=item.pricePerUnit * item.count\r",
									"    });\r",
									"\r",
									"    pm.expect(responseData.totalDetails.total).to.equal(total);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has status Processing\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.status).to.equal(\"Processing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"customerId\": \"Shop\",\r\n  \"merchantId\": \"{{userId}}\",\r\n  \"order\": {\r\n    \"lines\": [\r\n      {\r\n        \"count\": 1,\r\n        \"name\": \"{{goldItemName}}\",\r\n        \"currency\": \"{{gameGoldCurrency}}\"\r\n      },\r\n      {\r\n        \"count\": 1,\r\n        \"name\": \"{{armorItemName}}\",\r\n        \"currency\": \"{{gameGoldCurrency}}\"\r\n      }\r\n    ]\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/payment",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "ExecutePayment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has status Completed\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.status).to.equal(\"Completed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/payment/:paymentId/execute",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"payment",
								":paymentId",
								"execute"
							],
							"variable": [
								{
									"key": "paymentId",
									"value": "{{paymentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let amount = pm.response.json().balances[0].amount\r",
									"\r",
									"let previousAmount = +pm.variables.get(\"accountAmount\");\r",
									"let paymentTotal = +pm.variables.get(\"paymentTotal\");\r",
									"\r",
									"pm.test(`Account amount ${amount} = ${previousAmount} + ${paymentTotal}`, function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    let expectedAmount = previousAmount + paymentTotal;\r",
									"    pm.expect(responseData.balances[0].amount).to.equal(expectedAmount);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/payment/account",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"payment",
								"account"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "gameGoldCurrency",
			"value": "GAME_GOLD",
			"type": "string"
		},
		{
			"key": "goldItemName",
			"value": "Gold_Test_ItemPrice",
			"type": "string"
		},
		{
			"key": "armorItemName",
			"value": "Armor_Test_ItemPrice",
			"type": "string"
		}
	]
}